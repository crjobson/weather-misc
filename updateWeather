#!/opt/bin/python2.5
# -*- coding: utf-8 -*-

import paramiko
import sys
import getopt
import MySQLdb
from datetime import datetime
from scp import SCPClient

debug = False
noInsert = False
logFile = ""
log = None
try:
    opts, args = getopt.getopt(sys.argv[1:], "vxl:")
except getopt.GetoptError:
    print "usage: updateweather.py [-v] [-x] [-l logfile]"
    sys.exit(2);
    
for opt, arg in opts:
    if opt == "-v":
        debug = True
    elif opt == "-x":
        noInsert = True
    elif opt == "-l":
        logFile = arg

if logFile != "":
    log = open(logFile, "a")
    if log:
        log.write("Log Time: " + str(datetime.now()) + "\n")
    
if debug:
    print "Debug: " + str(debug)
    print "NoInsert: " + str(noInsert)
    if log:
        log.write("Debug: " + str(debug) + "\n")
        log.write("NoInsert: " + str(noInsert) + "\n")
    
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

ssh.connect('192.168.0.6', username='root', password='')

con = MySQLdb.connect('localhost', 'root', '', 'mysql')
if not con:
    print "Error: Unable to connect to database"
    if log:
        log.write("Error: Unable to connect to database\n")
        log.write("=====================\n")
        log.close()
    sys.exit(1);
    
cur = con.cursor()
    
cur.execute("select max(Id) from weather")
rows = cur.fetchall()
    
if len(rows) <= 0:
    print "Error: No local weather data"
    if log:
        log.write("Error: No local weather data\n")
        log.write("=====================\n")
        log.close()
    con.close()
    sys.exit(1)
    
maxId = rows[0][0]

if debug:
    print "Max local weather record: %d" % (maxId)
    if log:
        log.write("Max local weather record: %d\n" % (maxId))
    
count = 10

while True:
    if debug:
        print "Start: count %d" % (count)
        if log:
            log.write("Start: count %d\n" % (count))
    
    cmd = "/rw/tmp/wsp-static -c %d -e" % (count)
    stdin, stdout, stderr = ssh.exec_command(cmd)
    data = stdout.readlines()
    errout = stderr.readlines()
    
    if len(errout) == 1 and "not found" in errout[0]:
        if debug:
            print "Copying wsp-static across ..."
        scp = SCPClient(ssh.get_transport())
        scp.put('/root/wsp-static', '/rw/tmp/wsp-static')
        continue

    if len(data) <= 0:
        print "Error: No remote weather data"
        if log:
            log.write("Error: No remote weather data\n")
            log.write("=====================\n")
            log.close()
        con.close()
        sys.exit(1)
        
    found = 0
    i = 0
    while True:
        line = data[i]

        if debug:
            print "Check: " + line
            if log:
                log.write("Check: " + line + "\n")
        
        items = line.split(",")
        
        items[1] = datetime.strptime(items[1].strip(), '%Y-%m-%d %H:%M:%S').isoformat()  # timestamp
        items[2] = datetime.strptime(items[2].strip(), '%Y-%m-%d %H:%M:%S').isoformat()  # timestamp
        items[34] = int(items[34].strip(), 16)                                           # read address
    
        cur.execute("SELECT ID, Data_Address FROM weather WHERE ID < %s AND Data_Address = %s AND TIMESTAMPDIFF(MINUTE, Recorded, %s) <= 1", (maxId, items[34], items[2]))
        rows = cur.fetchall()
        
        if len(rows) > 0:
            row = rows[0]
                
            if found == 0:
                curIndex = row[0]
                curDataAddress = row[1]
                found = 1
        
            if debug:
                print "Successfully matched: %d " % (curIndex) + str(row)
                print
                if log:
                    log.write("Successfully matched: %d " % (curIndex) + str(row) + "\n")
                
            i += 1
            curIndex += 1
        else:
            if debug:
                print "Didn't match"
                if log:
                    log.write("Didn't match\n")
            break
            
    if found == 0:
        count *= 2
    else:
        break

ssh.close()
    
if found == 0:
    print "Error: Failed to find any data to insert"
    if log:
        log.write("Error: Failed to find any data to insert\n")
        log.write("=====================\n")
        log.close()
    con.close()
    sys.exit(1)
    
cur.execute("SELECT Data_Address from weather WHERE ID = %s", (maxId))
rows = cur.fetchall()

if len(rows) <= 0:
    print "Error: Unable to locate last row"
    if log:
        log.write("Error: Unable to locate last row\n")
        log.write("=====================\n")
        log.close()
    con.close()
    sys.exit(1)
    
row = rows[0]

if debug:
    print "Last row: 0x%x / 0x%x" % (items[34], row[0])

if (items[34] != row[0]):
    print "Error: data address expected to be %d but instead found %d" % (items[34], row[0])
    if log:
        log.write("Error: data address expected to be %d but instead found %d\n" % (tems[34], row[0]))
        log.write("=====================\n")
        log.close()
    con.close()
    sys.exit(1)
    
# now we find the end of the matches and start inserting ...
if noInsert:
    print "No inserts to be executed"
    if log:
        log.write("No inserts to be executed\n")
        log.write("=====================\n")
        log.close()
    con.close()
    sys.exit(0)

# do the inserts ...
if debug:
    print "DELETE at [%d]" % (maxId)
    if log:
        log.write("DELETE at [%d]\n" % (maxId))
            
cur.execute("DELETE FROM weather WHERE ID = %s", (maxId))
        
# get the last record for the rain ticks
cur.execute("SELECT Rain_Ticks from weather WHERE ID = (SELECT max(ID) from weather)")
rows = cur.fetchall()

row = rows[0]
lastRainTicks = row[0]

if debug:
    print "INSERT into weather ..."
    if log:
        log.write("INSERT into weather ...\n")
            
while i < len(data):
    line = data[i]
            
    if debug:
        print "Insert [%d]: " % (curIndex) + " " + line
        if log:
            log.write("Insert [%d]: " % (curIndex) + " " + line + "\n")
            
    items = line.split(",")
        
    items[1] = datetime.strptime(items[1].strip(), '%Y-%m-%d %H:%M:%S').isoformat()
    items[2] = datetime.strptime(items[2].strip(), '%Y-%m-%d %H:%M:%S').isoformat()
    items[34] = int(items[34].strip(), 16)
    
    newRainTicks = int(items[18].strip())
    diffTicks = newRainTicks - lastRainTicks
    rainSinceLast = diffTicks * 0.3
            
    # 012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
    # 0 Index             1 Transfer          2 Recorded          3 Reading_Interval  4 Indoor_Humidty    5 Indoor_Temp
    # 6 Outdoor_Humidity  7 Outdoor_Temp      8 Dew_Point         9 Wind_Chill       10 Abs_Pressure     11 Rel_Pressure
    #12 Wind_Avg         13 Wind_Avg_Beaufort14 Wind_Gust        15 Wind_Gust_Beaufor16 Wind_Direction   17 Wind_Direction_Text
    #18 Rain_Ticks       19 Rain_Total       20 Rain_Since_Last  21 Rain_Last_Hour   22 Rain_Last_24     23 Rain_Last_7Days
    #24 Rain_Last_30Days 25 Rain_Last_Year   26 Status_0         27 Status_1         28 Status_2         29 Status_3
    #30 Status_4         31 Status_5         32 Status_6         33 Status_7         34 Data_Address
    cur.execute("INSERT INTO weather(`Index`, Transfer, Recorded, Reading_Interval, Indoor_Humidity, Indoor_Temp, \
Outdoor_Humidity, Outdoor_Temp, Dew_Point, Wind_Chill, Abs_Pressure, Rel_Pressure, Wind_Avg, Wind_Avg_Beaufort, \
Wind_Gust, Wind_Gust_Beaufort, Wind_Direction, Wind_Direction_Text, Rain_Ticks, Rain_Total, Rain_Since_Last, \
Rain_last_Hour, Rain_Last_24, Rain_Last_7Days, Rain_Last_30Days, Rain_Last_Year, Status_0, Status_1, Status_2, \
Status_3, Status_4, Status_5, Status_6, Status_7, Data_Address) VALUES(%s, %s, %s, %s, %s, %s, %s, \
%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", 
(items[0].strip(), items[1], items[2], items[3].strip(), items[4].strip(), items[5].strip(), \
items[6].strip(), items[7].strip(), items[8].strip(), items[9].strip(), items[10].strip(), items[11].strip(), items[12].strip(), \
items[13].strip(), items[14].strip(), items[15].strip(), items[16].strip(), items[17].strip(), items[18].strip(), items[19].strip(), \
str(rainSinceLast), items[21].strip(), items[22].strip(), items[23].strip(), items[24].strip(), items[25].strip(), items[26].strip(), \
items[27].strip(), items[28].strip(), items[29].strip(), items[30].strip(), items[31].strip(), items[32].strip(), items[33].strip(), items[34]))
                    
    lastRainTicks = newRainTicks
    curIndex += 1
    i += 1
 
if con:
    con.close()
    
if debug:
    print "Successfully completed"
    if log:
        log.write("Successfully completed\n")
    
if log:
    log.write("=====================\n")
    log.close()
    
sys.exit(0)
